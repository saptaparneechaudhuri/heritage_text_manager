<?php

/**
 * @file
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_alter()
 * Add the taxonomy create form.
 */
function heritage_text_manager_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_heritage_text_form' || $form_id == 'node_heritage_text_edit_form') {
    // print("<pre>");print_r($form['author']);exit;.
    $form['author']['markup'] = [
      '#type' => 'item',
      '#markup' => t('Select the author name by typing in the above field. If it is not present click here to add the Author.'),
    ];
  }
}

/**
 * Implements hook_node_insert()
 * for saving metadata on inserting a node.
 */
function heritage_text_manager_node_insert(NodeInterface $node) {
  $result = _insert_meta_info($node);
}

/**
 * Implements hook_node_update()
 * for saving metadata on inserting a node.
 */
function heritage_text_manager_node_update(NodeInterface $node) {
  $result = _insert_meta_info($node);
}

/**
 * Implements hook_node_view()
 * for adding an edit link on every field.
 */
function heritage_text_manager_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $node_type = $entity->getType();
  $text_id = db_query("SELECT entity_id FROM `node__field_machine_name` WHERE field_machine_name_value = :node_type", [':node_type' => $node_type])->fetchField();
  if (isset($text_id) && $text_id > 0) {
    $nid = $entity->id();
    $field_names = db_query("SELECT field_name, id FROM `heritage_field_meta_data` WHERE nid = :nid", [':nid' => $nid])->fetchAll();
    foreach ($field_names as $field_name) {
      $attributes = [
        'class' => ['use-ajax', 'align-right'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode([
          'width' => 700,
        ]),
      ];
      $url = Url::fromRoute('heritage_text_manager.editsource', ['sourceid' => $field_name->id], ['attributes' => $attributes]);
      $source_node_edit_link = \Drupal::l(t('Edit'), $url);
      $build[$field_name->field_name][0]['#text'] = $build[$field_name->field_name][0]['#text'] . $source_node_edit_link;
    }
  }
}

/**
 * Deletes entries from the mentioned table.
 */
function heritage_text_manager_entity_delete(EntityInterface $entity) {
  db_delete('heritage_field_meta_data')
    ->condition('nid', $entity->id())
    ->execute();

}

/**
 * Custom function to save meta data info.
 *
 * @param node
 *   Drupal Node Object
 */
function _insert_meta_info($node) {
  $node_type = $node->getType();

  $text_id = db_query("SELECT entity_id FROM `node__field_machine_name` WHERE field_machine_name_value = :node_type", [':node_type' => $node_type])->fetchField();

  if (isset($text_id) && $text_id > 0) {
    $sources = db_query("SELECT id, format, language FROM `heritage_source_info` WHERE text_id = :text_id", [':text_id' => $text_id])->fetchAll();
    for ($i = 0; $i < count($sources); $i++) {
      $formats = explode(',', $sources[$i]->format);
      for ($j = 0; $j < count($formats); $j++) {
        $field_name = 'field_' . $node_type . '_' . $sources[$i]->id . '_' . strtolower($formats[$j]);

        $check_info = db_query("SELECT COUNT(*) FROM `heritage_field_meta_data` WHERE nid = :nid AND field_name = :field_name", [':nid' => $node->id(), ':field_name' => $field_name])->fetchField();
        $table_name = 'node__field_' . $node_type . '_' . $sources[$i]->id . '_' . $sources[$i]->format;
        $language = db_query("SELECT langcode FROM " . $table_name . " WHERE  bundle = :node_type AND entity_id = :nodeid", [':node_type' => $node_type, ':nodeid' => $node->id()])->fetchField();
        $meta_info = get_meta_info($sources[$i]->id, 'source_node', $language);

        if ($check_info == 0) {

          $db = \Drupal::database();
          if (isset($node->{$field_name}->value)) {

            $sourceid = $db->insert('heritage_field_meta_data')
              ->fields([
                'nid' => $node->id(),
                'field_name' => $field_name,
                'language' => $language,
                'metadata' => $meta_info,

              ])
              ->execute();
          }
        }
        else {

          $updateQuery = "UPDATE `heritage_field_meta_data` SET language = :language,metadata = :metadata WHERE field_name = :field_name AND nid = :nid";
          db_query($updateQuery, [':language' => $language, ':field_name' => $field_name, ':nid' => $node->id(), ':metadata' => $meta_info]);
        }
      }
    }
  }
  return TRUE;
}

/**
 * Create a function get_meta_info and it returns the json object.
 *
 * @param $nid
 *   Unique id of source_node or text
 *
 * @param $node_type
 *   Type of the node
 * @param $language
 *   Language in which the content is stored
 */
function get_meta_info($nid, $node_type, $language) {
  // Return the json object.
  if ($node_type == 'gita') {
    // Load the node of the given id.
    $node = Node::load($nid);

    // Insert the values of the fields in the json format.
    $meta_info = [

      'alternative_titles' => $node->field_alternative_titles->value,
      'author_name' => $node->field_author_name->target_id,
      'copyright_expiry_year' => $node->field_copyright_expiry_year->value,
      'copyright_license' => $node->field_copyright_license->value,
      'copyright_name' => $node->field_copyright_name->target_id,
      'copyright_year' => $node->field_copyright_name->value,
      'distribution_allowed' => $node->field_distribution_allowed->value,
      'download_allowed' => $node->field_download_allowed->value,
      'edition' => $node->field_edition->value,
      'foreword' => $node->field_foreword->value,

      'keywords' => $node->field_tags->target_id,
      'language' => $node->field_tags->target_id,
      'preface' => $node->field_preface->value,
      'prerequisites' => $node->field_prerequisites->value,
      'published_date' => $node->field_published_date->value,
      'publisher_name' => $node->field_publisher_name->target_id,
      'script' => $node->field_scipt->value,
      'translated_titles' => $node->field_translated_titles->value,
      'text_type' => $node->field_text_type->value,

    ];

    $meta_info = json_encode($meta_info);
  }

  if ($node_type == 'source_node') {

    // Load the node of the given id.
    $node = Node::load($nid);
    // Query to find the author name.
    $text_author = db_query("SELECT name FROM `taxonomy_term_field_data` WHERE tid = :authid", [':authid' => $node->field_author_name->target_id])->fetchField();

    // Insert the values of the fields in the json format.
    $meta_info = [

      'alternative_titles' => $node->field_alternative_titles->value,
      'author_name' => $text_author,
      'copyright_expiry_year' => $node->field_copyright_expiry_year->value,
      'copyright_license' => $node->field_copyright_license->value,
      'copyright_name' => $node->field_copyright_name->target_id,
      'copyright_year' => $node->field_copyright_name->value,
      'distribution_allowed' => $node->field_distribution_allowed->value,
      'download_allowed' => $node->field_download_allowed->value,
      'edition' => $node->field_edition->value,
      'foreword' => $node->field_foreword->value,
      'format' => $node->field_format->value,
      'keywords' => $node->field_tags->target_id,
      'language' => $language,
      'preface' => $node->field_preface->value,
      'prerequisites' => $node->field_prerequisites->value,
      'published_date' => $node->field_published_date->value,
      'publisher_name' => $node->field_publisher_name->target_id,
      'script' => $node->field_scipt->value,
      'translated_titles' => $node->field_translated_titles->value,
      'type' => $node->field_type->value,

    ];

    $meta_info = json_encode($meta_info);

  }

  return $meta_info;

}
